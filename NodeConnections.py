from manim import *

class NodeConnections(Scene):
    def construct(self):
        ###   Geometry
        A = Dot([0,0,0]).scale(1.5).move_to([12,0,0]).set_color(ORANGE)
        A.generate_target()
        B = Dot([0,0,0]).scale(1.5).set_color(ORANGE)
        B.generate_target()
        C = Dot([0,0,0]).scale(1.5).move_to([-0.5,0,0]).set_color(ORANGE)
        C.generate_target()
        D = Dot([0,0,0]).scale(1.5).move_to([0,0.5,0]).set_color(ORANGE)
        D.generate_target()
        E = Dot([0,0,0]).scale(1.5).move_to([0.5,0.5,0]).set_color(ORANGE)
        E.generate_target()
        F = Dot([0,0,0]).scale(1.5).move_to([-0.5,-0.5,0]).set_color(ORANGE)
        F.generate_target()
        G = Dot([0,0,0]).scale(1.5).move_to([0,-1,0]).set_color(ORANGE)
        G.generate_target()
        H = Dot([0,0,0]).scale(1.5).move_to([0,1,0]).set_color(ORANGE)
        H.generate_target()
        points = VGroup(A, B, C, D, E, F, G, H)

        A_con = Line([-0.5,0,0], [0.5,0,0]).set_color(BLUE)
        B_con = VGroup(Line([0,0.5,0], [0.5,-0.5,0]), Line([0.5,-0.5,0], [-0.5,-0.5,0]), Line([-0.5,-0.5,0], [0,0.5,0])).set_color(BLUE)
        C_con = VGroup(Line([-0.5,0.5,0],[0.5,0.5,0]), Line([0.5,0.5,0],[0.5,-0.5,0]), Line([0.5,-0.5,0],[-0.5,-0.5,0]), Line([-0.5,-0.5,0],[-0.5,0.5,0]), Line([-0.5,0.5,0],[0.5,-0.5,0]), 
                Line([0.5,0.5,0],[-0.5,-0.5,0])).set_color(BLUE)
        D_con = VGroup(Line([0,1,0],[0.8,0.5,0]), Line([0.8,0.5,0],[0.5,-0.5,0]), Line([0.5,-0.5,0],[-0.5,-0.5,0]), Line([-0.5,-0.5,0],[-0.8,0.5,0]), Line([-0.8,0.5,0],[0,1,0]), 
                Line([0,1,0],[0.5,-0.5,0]), Line([0.5,-0.5,0],[-0.8,0.5,0]), Line([-0.8,0.5,0],[0.8,0.5,0]), Line([0.8,0.5,0],[-0.5,-0.5,0]), Line([-0.5,-0.5,0],[0,1,0])).set_color(BLUE)
        E_con = VGroup(Line([0,1,0],[0.8,0.5,0]), Line([0.8,0.5,0],[0.8,-0.5,0]), Line([0.8,-0.5,0],[0,-1,0]), Line([0,-1,0],[-0.8,-0.5,0]), Line([-0.8,-0.5,0],[-0.8,0.5,0]), 
                Line([-0.8,0.5,0],[0,1,0]), Line([0,1,0],[0,-1,0]), Line([0,-1,0],[0.8,0.5,0]), Line([0.8,0.5,0],[-0.8,-0.5,0]), Line([-0.8,-0.5,0],[0.8,-0.5,0]), 
                Line([0.8,-0.5,0],[-0.8,0.5,0]), Line([-0.8,0.5,0],[0.8,0.5,0]), Line([0,-1,0],[-0.8,0.5,0]), Line([-0.8,-0.5,0],[0,1,0]), Line([0,1,0],[0.8,-0.5,0])).set_color(BLUE)
        F_con = VGroup(Line([0,1,0],[0.8,0.5,0]), Line([0.8,0.5,0],[1.1,-0.5,0]), Line([1.1,-0.5,0],[0.5,-1.3,0]), Line([0.5,-1.3,0],[-0.5,-1.3,0]), Line([-0.5,-1.3,0],[-1.1,-0.5,0]), 
                Line([-1.1,-0.5,0],[-0.8,0.5,0]), Line([-0.8,0.5,0],[0,1,0]), Line([0,1,0],[0.5,-1.3,0]), Line([0.5,-1.3,0],[-0.8,0.5,0]), Line([-0.8,0.5,0],[1.1,-0.5,0]), 
                Line([1.1,-0.5,0],[-1.1,-0.5,0]), Line([-1.1,-0.5,0],[0.8,0.5,0]), Line([0.8,0.5,0],[-0.8,0.5,0]), Line([-0.8,0.5,0],[-0.5,-1.3,0]), Line([-0.5,-1.3,0],[0.8,0.5,0]), 
                Line([0.8,0.5,0],[0.5,-1.3,0]), Line([0.5,-1.3,0],[-1.1,-0.5,0]), Line([-1.1,-0.5,0],[0,1,0]), Line([0,1,0],[1.1,-0.5,0]), Line([1.1,-0.5,0],[-0.5,-1.3,0]), Line([-0.5,-1.3,0],[0,1,0])).set_color(BLUE)
        G_con = VGroup(Line([-0.5,1.3,0],[0.5,1.3,0]), Line([0.5,1.3,0],[1.3,0.5,0]), Line([1.3,0.5,0],[1.3,-0.5,0]), Line([1.3,-0.5,0],[0.5,-1.3,0]), Line([0.5,-1.3,0],[-0.5,-1.3,0]), 
                Line([-0.5,-1.3,0],[-1.3,-0.5,0]), Line([-1.3,-0.5,0],[-1.3,0.5,0]), Line([-1.3,0.5,0],[-0.5,1.3,0]), Line([-0.5,1.3,0],[0.5,-1.3,0]), Line([0.5,-1.3,0],[0.5,1.3,0]), 
                Line([0.5,1.3,0],[-0.5,-1.3,0]), Line([-0.5,-1.3,0],[1.3,0.5,0]), Line([1.3,0.5,0],[-1.3,0.5,0]), Line([-1.3,0.5,0],[1.3,-0.5,0]), Line([1.3,-0.5,0],[-1.3,-0.5,0]), 
                Line([-1.3,-0.5,0],[1.3,0.5,0]), Line([1.3,0.5,0],[-0.5,1.3,0]), Line([-0.5,1.3,0],[-1.3,-0.5,0]), Line([-1.3,-0.5,0],[0.5,-1.3,0]), Line([0.5,-1.3,0],[1.3,0.5,0]), 
                Line([0.5,1.3,0],[-1.3,0.5,0]), Line([-1.3,0.5,0],[-0.5,-1.3,0]), Line([-0.5,-1.3,0],[1.3,-0.5,0]), Line([1.3,-0.5,0],[0.5,1.3,0]), Line([0.5,1.3,0],[-1.3,-0.5,0]), 
                Line([-0.5,-1.3,0],[-0.5,1.3,0]), Line([-0.5,1.3,0],[1.3,-0.5,0]), Line([-1.3,0.5,0],[0.5,-1.3,0])).set_color(BLUE)
        cons = VGroup(A_con, B_con, C_con, D_con, E_con, F_con, G_con)

        rat_1 = Line([-3.1,-0.7,0],[-2.9,-0.7,0])
        rat_2 = Line([-2.1,-0.7,0],[-1.9,-0.7,0])
        rat_3 = Line([-1.1,-0.7,0],[-0.9,-0.7,0])
        rat_4 = Line([-0.1,-0.7,0],[0.1,-0.7,0])
        rat_5 = Line([0.9,-0.7,0],[1.1,-0.7,0])
        rat_6 = Line([1.9,-0.7,0],[2.1,-0.7,0])
        rat_7 = Line([2.9,-0.7,0],[3.1,-0.7,0])
        rat_8 = Line([3.9,-0.7,0],[4.1,-0.7,0])
        rats = VGroup(rat_1,rat_2,rat_3,rat_4,rat_5,rat_6,rat_7,rat_8)

        down_arrow = Arrow(start=UP, end=DOWN).shift([0.5,0,0])

        shapes = VGroup(cons, points)
        ###   -Geometry
        
        ###   Text
        P_Text = MathTex(r"n_{points} = ", font_size=40).move_to([-5.1,3,0])                                                              
        C_Text = MathTex(r"n_{connect} = ", font_size=40).move_to([-5,-3,0])
        ratio_CP_txt = MathTex(r"Ratio_{\frac{Connect}{Points}} = ", font_size=40)
        equal = MathTex(r"=", font_size=40).move_to([-3.8,-0.5,0])
        ratio_simp = MathTex(r"\frac{n_{points}-1}{2}", font_size=40).move_to([-2.1,-0.5,0])
        ratio_full = MathTex(r"\frac{n_{points}^2-n_{points}}{2}", font_size=40).move_to([3.25,-0.5,0])
        n_text = MathTex(r"\times n_{points}", font_size=40).move_to([-0.25,-0.5,0])
        rat_CP = MathTex(r"\frac{Connections}{Points}", font_size=30).move_to([-2.1,-2,0])
        times_points = MathTex(r"\times \ \ Points", font_size=30).move_to([-0.25,-2,0])
        connects = MathTex(r"Connections", font_size=30).move_to([3.25,-2,0])
        explanation = MathTex(r"For\ any\ number\ of\ p&oints\ (n),\ the\ number\ of\\connections\ between\ them\ &is\ equal\ to\ n\ squared\ minus\ n\\all\ div&ided\ by\ 2").set_color(RED_C).move_to([0,0,0])
        
        one = MathTex(r"1", font_size=40).move_to([0,2,0]).set_color(ORANGE)
        one.generate_target()
        two = MathTex(r"2", font_size=40).move_to([0,2,0]).set_color(ORANGE)
        two.generate_target()
        three = MathTex(r"3", font_size=40).move_to([0,2,0]).set_color(ORANGE)
        three.generate_target()
        four = MathTex(r"4", font_size=40).move_to([0,2,0]).set_color(ORANGE)
        four.generate_target()
        five = MathTex(r"5", font_size=40).move_to([0,2,0]).set_color(ORANGE)
        five.generate_target()
        six = MathTex(r"6", font_size=40).move_to([0,2,0]).set_color(ORANGE)
        six.generate_target()
        seven = MathTex(r"7", font_size=40).move_to([0,2,0]).set_color(ORANGE)
        seven.generate_target()
        eight = MathTex(r"8", font_size=40).move_to([0,2,0]).set_color(ORANGE)
        eight.generate_target()

        zero_con = MathTex(r"0", font_size=40).move_to([0,-2,0]).set_color(BLUE)
        zero_con.generate_target()
        one_con = MathTex(r"1", font_size=40).move_to([0,-2,0]).set_color(BLUE)
        one_con.generate_target()
        three_con = MathTex(r"3", font_size=40).move_to([0,-2,0]).set_color(BLUE)
        three_con.generate_target()
        six_con = MathTex(r"6", font_size=40).move_to([0,-2,0]).set_color(BLUE)
        six_con.generate_target()
        ten_con = MathTex(r"10", font_size=40).move_to([0,-2,0]).set_color(BLUE)
        ten_con.generate_target()
        fifteen_con = MathTex(r"15", font_size=40).move_to([0,-2,0]).set_color(BLUE)
        fifteen_con.generate_target()
        twentyone_con = MathTex(r"21", font_size=40).move_to([0,-2,0]).set_color(BLUE)
        twentyone_con.generate_target()
        twentyeight_con = MathTex(r"28", font_size=40).move_to([0,-2,0]).set_color(BLUE)
        twentyeight_con.generate_target()

        P_text_group = VGroup(P_Text, one, two, three, four, five, six, seven, eight)
        C_text_group = VGroup(C_Text, zero_con, one_con, three_con, six_con, ten_con, fifteen_con, twentyone_con, twentyeight_con)
        text_a = VGroup(P_text_group, C_text_group)
        rat_group = VGroup(rats, one, two, three, four, five, six, seven, eight, zero_con, one_con, three_con, six_con, ten_con, fifteen_con, twentyone_con, twentyeight_con)
        ###   -Text

        ###   Animation
        self.wait(0.5)
        self.play(FadeIn(P_Text, C_Text))

        self.add(A)                                                                                             # Point
        A.target.shift([-12,0,0])
        self.play(MoveToTarget(A))
        self.play(FadeIn(one, zero_con), run_time = 0.5)
        one.target.move_to([-3.3,3.1,0])
        zero_con.target.move_to([-3.3,-2.9,0])
        self.wait(0.5)
        self.play(MoveToTarget(one), MoveToTarget(zero_con))
        self.wait(0.5)

        self.add(B)                                                                                             # Line
        B.target.shift([0.5,0,0])
        A.target.shift([-0.5,0,0])
        self.play(MoveToTarget(B), MoveToTarget(A))
        self.add_foreground_mobjects(A,B)
        self.play(Create(A_con), run_time = 0.5)
        self.play(FadeIn(two,one_con),  run_time = 0.5)
        two.target.move_to([-2.3,3.1,0])
        one_con.target.move_to([-2.3,-2.9,0])
        self.wait(0.5)
        self.play(MoveToTarget(two),MoveToTarget(one_con))
        self.play(FadeOut(A_con), run_time = 0.25)
        self.wait(0.5)

        self.add(C)                                                                                             # Triangle
        C.target.shift([0.5,0.5,0])
        B.target.shift([0,-0.5,0])
        A.target.shift([0,-0.5,0])
        self.play(MoveToTarget(A), MoveToTarget(B), MoveToTarget(C))
        self.add_foreground_mobjects(A,B,C)
        self.play(Create(B_con), run_time = 0.5)
        self.play(FadeIn(three, three_con),  run_time = 0.5)
        three.target.move_to([-1.3,3.1,0])
        three_con.target.move_to([-1.3,-2.9,0])
        self.wait(0.5)
        self.play(MoveToTarget(three), MoveToTarget(three_con))
        self.play(FadeOut(B_con),run_time = 0.25)
        self.wait(0.5)

        self.add(D)                                                                                             # Square
        D.target.shift([0.5,0,0])
        C.target.shift([-0.5,0,0])
        self.play(MoveToTarget(C), MoveToTarget(D))
        self.add_foreground_mobjects(A,B,C,D)
        self.play(Create(C_con), run_time = 0.75)
        self.play(FadeIn(four,six_con),  run_time = 0.5)
        four.target.move_to([-0.3,3.1,0])
        six_con.target.move_to([-0.3,-2.9,0])
        self.wait(0.5)
        self.play(MoveToTarget(four), MoveToTarget(six_con))
        self.play(FadeOut(C_con), run_time = 0.25)        
        self.wait(0.5)

        self.add(E)                                                                                             # Pentagon
        E.target.shift([-0.5,0.5,0])
        D.target.shift([0.3,0,0])
        C.target.shift([-0.3,0,0])
        self.play(MoveToTarget(C), MoveToTarget(D), MoveToTarget(E))
        self.add_foreground_mobjects(A,B,C,D,E)
        self.play(Create(D_con), run_time = 1)
        self.play(FadeIn(five,ten_con),  run_time = 0.5)
        five.target.move_to([0.7,3.1,0])
        ten_con.target.move_to([0.7,-2.9,0])
        self.wait(0.5)
        self.play(MoveToTarget(five), MoveToTarget(ten_con))
        self.play(FadeOut(D_con), run_time = 0.25)        
        self.wait(0.5)

        self.add(F)                                                                                             # Hexagon
        A.target.shift([-0.3,0,0])
        B.target.shift([0.3,0,0])
        F.target.shift([0.5,-0.5,0])
        self.play(MoveToTarget(A), MoveToTarget(B), MoveToTarget(F))
        self.add_foreground_mobjects(A,B,C,D,E,F)
        self.play(Create(E_con), run_time = 1.5)
        self.play(FadeIn(six, fifteen_con),  run_time = 0.5)
        six.target.move_to([1.7,3.1,0])
        fifteen_con.target.move_to([1.7,-2.9,0])
        self.wait(0.5)
        self.play(MoveToTarget(six), MoveToTarget(fifteen_con))
        self.play(FadeOut(E_con), run_time = 0.25) 
        self.wait(0.5)

        self.add(G)                                                                                             # Heptagon
        G.target.shift([-0.5,-0.25,0])
        F.target.shift([0.5,-0.25,0])
        A.target.shift([-0.3,0,0])
        B.target.shift([0.3,0,0])
        self.play(MoveToTarget(G), MoveToTarget(A), MoveToTarget(B), MoveToTarget(F))
        self.add_foreground_mobjects(A,B,C,D,E,F,G)
        self.play(Create(F_con), run_time = 2)
        self.play(FadeIn(seven, twentyone_con),  run_time = 0.5)
        seven.target.move_to([2.7,3.1,0])
        twentyone_con.target.move_to([2.7,-2.9,0])
        self.wait(0.5)
        self.play(MoveToTarget(seven), MoveToTarget(twentyone_con))
        self.play(FadeOut(F_con), run_time = 0.25) 
        self.wait(0.5)

        self.add(H)                                                                                             # Octagon
        E.target.shift([-0.5,0.25,0])
        H.target.shift([0.5,0.25,0])
        C.target.shift([-0.5,0,0])
        D.target.shift([0.5,0,0])
        A.target.shift([-0.2,0,0])
        B.target.shift([0.2,0,0])
        self.play(MoveToTarget(E), MoveToTarget(H), MoveToTarget(C), MoveToTarget(D), MoveToTarget(A), MoveToTarget(B))
        self.add_foreground_mobjects(A,B,C,D,E,F,G,H)
        self.play(Create(G_con), run_time = 2.5)
        self.play(FadeIn(eight, twentyeight_con),  run_time = 0.5)
        eight.target.move_to([3.7,3.1,0])
        twentyeight_con.target.move_to([3.7,-2.9,0])
        self.wait(0.5)
        self.play(MoveToTarget(eight), MoveToTarget(twentyeight_con))
        self.wait(0.5)

        self.remove_foreground_mobjects(points, G_con)                                                          # Text shift in & Geometry fade out
        self.play(FadeOut(points, G_con), run_time = 0.5)
        P_text_group.generate_target()
        C_text_group.generate_target()
        C_text_group.target.shift([0,4.5,0])
        self.play(MoveToTarget(P_text_group), MoveToTarget(C_text_group))
        
        self.play(Write(ratio_CP_txt))
        ratio_CP_txt.generate_target()
        self.wait(0.5)
        ratio_CP_txt.target.move_to([-5,-0.75,0])
        self.play(MoveToTarget(ratio_CP_txt))
        self.wait(0.5)
        
        one.target.move_to([-3,-1.1,0])                                                                         # Flipping Ns
        zero_con.target.move_to([-3,-0.3,0])
        two.target.move_to([-2,-1.1,0])
        one_con.target.move_to([-2,-0.3,0])
        three.target.move_to([-1,-1.1,0])
        three_con.target.move_to([-1,-0.3,0])
        four.target.move_to([0,-1.1,0])
        six_con.target.move_to([0,-0.3,0])
        five.target.move_to([1,-1.1,0])
        ten_con.target.move_to([1,-0.3,0])
        six.target.move_to([2,-1.1,0])
        fifteen_con.target.move_to([2,-0.3,0])
        seven.target.move_to([3,-1.1,0])
        twentyone_con.target.move_to([3,-0.3,0])
        eight.target.move_to([4,-1.1,0])
        twentyeight_con.target.move_to([4,-0.3,0])
        self.play(MoveToTarget(one), MoveToTarget(zero_con))
        self.play(Create(rat_1), run_time = 0.15)
        self.play(MoveToTarget(two), MoveToTarget(one_con))
        self.play(Create(rat_2), run_time = 0.15)
        self.play(MoveToTarget(three), MoveToTarget(three_con))
        self.play(Create(rat_3), run_time = 0.15)
        self.play(MoveToTarget(four), MoveToTarget(six_con))
        self.play(Create(rat_4), run_time = 0.15)
        self.play(MoveToTarget(five), MoveToTarget(ten_con))
        self.play(Create(rat_5), run_time = 0.15)
        self.play(MoveToTarget(six), MoveToTarget(fifteen_con))
        self.play(Create(rat_6), run_time = 0.15)
        self.play(MoveToTarget(seven), MoveToTarget(twentyone_con))
        self.play(Create(rat_7), run_time = 0.15)
        self.play(MoveToTarget(eight), MoveToTarget(twentyeight_con))
        self.play(Create(rat_8), run_time = 0.15)
        self.wait(0.5)
        
        rat_group.generate_target()                                                                             # Finding Ratio
        rat_group.target.shift([0,3,0])
        rg = rat_group.copy()
        rg.generate_target()
        rg.target.shift([0,3,0])
        ratio_CP_txt.target.shift([0,3,0])
        self.add(rg)
        self.remove(rat_group)
        self.play(FadeOut(P_Text, C_Text), MoveToTarget(rg), MoveToTarget(ratio_CP_txt), MoveToTarget(rat_group))
        self.wait(0.25)
        self.play(Create(down_arrow), run_time = 0.5)
        self.wait(0.25)
        rat_group.target.shift([0,-4.5,0])
        self.play(MoveToTarget(rat_group))
        self.wait(0.5)
        new_rat = VGroup(zero_con.copy(), one_con.copy(),two.copy().shift([1,0.8,0]).set_color(BLUE),three.copy().shift([1,0.8,0]).set_color(BLUE),four.copy().shift([1,0.8,0]).set_color(BLUE),five.copy().shift([1,0.8,0]).set_color(BLUE),
                    six.copy().shift([1,0.8,0]).set_color(BLUE),seven.copy().shift([1,0.8,0]).set_color(BLUE), two.copy().shift([-1,0,0]), two.copy(),two.copy().shift([1,0,0]),two.copy().shift([2,0,0]),two.copy().shift([3,0,0]),
                    two.copy().shift([4,0,0]),two.copy().shift([5,0,0]),two.copy().shift([6,0,0]), rats.copy())
        self.remove(one, two, three, four, five, six, seven, eight, zero_con, one_con, three_con, six_con, ten_con, fifteen_con, twentyone_con, twentyeight_con)
        self.play(Write(new_rat))
        self.wait(0.25)
        
        new_rat.generate_target()                                                                               # Simplification
        new_rat.target.shift([0,3.75,0])
        ratio_CP_txt.target.shift([0,-0.75,0])
        self.remove(rats)
        self.play(MoveToTarget(new_rat), FadeOut(rg), MoveToTarget(ratio_CP_txt), FadeOut(down_arrow))
        self.wait(0.25)
        self.play(FadeIn(equal))
        self.play(Write(ratio_simp))
        self.wait(0.5)
        self.play(FadeIn(rat_CP))
        self.play(Write(n_text))
        self.play(FadeIn(times_points))
        equal_2 = equal.copy().shift([4.9,0,0])
        self.play(FadeIn(equal_2), Write(ratio_full))
        equal_3 = equal.copy().shift([4.9,-1.5,0])
        self.play(FadeIn(equal_3), FadeIn(connects))
        self.wait(2)
        ratio_full.generate_target()
        ratio_full.target.move_to([0,2.5,0])
        
        self.play(MoveToTarget(ratio_full),FadeOut(equal_3,connects,times_points,equal,equal_2,new_rat,ratio_CP_txt,ratio_simp,n_text,rat_CP)) # Explanation
        self.wait()
        self.play(FadeIn(explanation))
        self.wait(5)
        ###   -Animation